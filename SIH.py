import math
import time
from datetime import datetime, timedelta
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st

# ----------------------------
# Domain constants
# ----------------------------
SOIL_TARGET_RANGE = {
    "рд░реЗрддреАрд▓реА (Sandy)": (0.10, 0.18),
    "рджреЛрдордЯ (Loam)": (0.18, 0.28),
    "рдЪрд┐рдХрдиреА (Clay)": (0.25, 0.35),
}

SOIL_RAW_MM_PER_M = {
    "рд░реЗрддреАрд▓реА (Sandy)": 60,
    "рджреЛрдордЯ (Loam)": 90,
    "рдЪрд┐рдХрдиреА (Clay)": 120,
}

ROOT_DEPTH_M = {
    "рд╢реБрд░реБрдЖрддреА рдЕрд╡рд╕реНрдерд╛": 0.3,
    "рд╡рдирд╕реНрдкрддрд┐ рдЕрд╡рд╕реНрдерд╛": 0.6,
    "рдлреВрд▓ рдЖрдиреЗ рдХреА рдЕрд╡рд╕реНрдерд╛": 0.8,
    "рдлрд▓ рдЖрдиреЗ рдХреА рдЕрд╡рд╕реНрдерд╛": 1.0,
}

KC_STAGE = {
    "рд╢реБрд░реБрдЖрддреА рдЕрд╡рд╕реНрдерд╛": 0.6,
    "рд╡рдирд╕реНрдкрддрд┐ рдЕрд╡рд╕реНрдерд╛": 0.95,
    "рдлреВрд▓ рдЖрдиреЗ рдХреА рдЕрд╡рд╕реНрдерд╛": 1.05,
    "рдлрд▓ рдЖрдиреЗ рдХреА рдЕрд╡рд╕реНрдерд╛": 0.9,
}

# ----------------------------
# Helper Functions
# ----------------------------
def area_to_sq_m(area_value: float, unit: str) -> float:
    if unit == "рдПрдХрдбрд╝":
        return area_value * 4046.8564224
    if unit == "рд╣реЗрдХреНрдЯреЗрдпрд░":
        return area_value * 10000.0
    if unit == "m┬▓":
        return area_value
    return area_value

def simple_eto_mm_per_day(tmin_c: float, tmax_c: float) -> float:
    tmean = (tmin_c + tmax_c) / 2.0
    td = max(tmax_c - tmin_c, 0)
    eto = max(0.0, 0.0023 * (tmean + 17.8) * math.sqrt(td) * 10)
    return eto

def irrigation_need_liters(soil_type, stage, current_vwc, target_low, area_m2, tmin_c, tmax_c):
    root_m = ROOT_DEPTH_M[stage]
    raw_mm_per_m = SOIL_RAW_MM_PER_M[soil_type]
    deficit_frac = max(target_low - current_vwc, 0.0) / max(target_low, 1e-6)
    deficit_mm = deficit_frac * raw_mm_per_m * root_m
    eto = simple_eto_mm_per_day(tmin_c, tmax_c)
    kc = KC_STAGE[stage]
    etc_mm = kc * eto
    total_mm = max(0.0, deficit_mm + etc_mm)
    liters = total_mm * area_m2
    return liters, deficit_mm, etc_mm

# ----------------------------
# Streamlit UI
# ----------------------------
st.set_page_config(page_title="ЁЯТз рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдВрдЪрд╛рдИ рдкреНрд░рдгрд╛рд▓реА", page_icon="ЁЯМ╛", layout="wide")

st.markdown("<h1 style='text-align: center; color: green;'>ЁЯТз рд╕реНрдорд╛рд░реНрдЯ рд╕рд┐рдВрдЪрд╛рдИ рдкреНрд░рдгрд╛рд▓реА </h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; font-size:18px;'>рдпрд╣ рдбреЗрдореЛ рдЖрдкрдХреЛ рдмрддрд╛рдПрдЧрд╛ рдХрд┐ рдХрдм рдФрд░ рдХрд┐рддрдиреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд░рдиреА рд╣реИред рдлрд╕рд▓, рдорд┐рдЯреНрдЯреА рдФрд░ рдореМрд╕рдо рдбреЗрдЯрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ рдФрд░ рдЙрдЪрд┐рдд рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред</p>", unsafe_allow_html=True)

# Sidebar Inputs
with st.sidebar:
    st.header("ЁЯУЛ рдЦреЗрдд рдХреА рдЬрд╛рдирдХрд╛рд░реА")
    crop = st.text_input("рдлрд╕рд▓ рдХрд╛ рдирд╛рдо (рдЬреИрд╕реЗ рдЧреЗрд╣реВрдБ, рдзрд╛рди, рдЯрдорд╛рдЯрд░)", value="рдЯрдорд╛рдЯрд░")
    soil_type = st.selectbox("рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ", list(SOIL_TARGET_RANGE.keys()))
    area_value = st.number_input("рдЦреЗрдд рдХрд╛ рдХреНрд╖реЗрддреНрд░рдлрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ", value=0.25, min_value=0.0, step=0.01)
    area_unit = st.selectbox("рдЗрдХрд╛рдИ", ["рдПрдХрдбрд╝", "рд╣реЗрдХреНрдЯреЗрдпрд░", "m┬▓"], index=0)
    stage = st.selectbox("рдлрд╕рд▓ рдХреА рдЕрд╡рд╕реНрдерд╛", list(ROOT_DEPTH_M.keys()), index=1)

    st.header("ЁЯМб рдореМрд╕рдо рд╡рд┐рд╡рд░рдг")
    tmin = st.number_input("рдЖрдЬ рдХрд╛ рдиреНрдпреВрдирддрдо рддрд╛рдкрдорд╛рди (┬░C)", value=22.0)
    tmax = st.number_input("рдЖрдЬ рдХрд╛ рдЕрдзрд┐рдХрддрдо рддрд╛рдкрдорд╛рди (┬░C)", value=33.0)

    st.header("ЁЯТз рдорд┐рдЯреНрдЯреА рдХреА рдирдореА")
    mode = st.radio("рдирдореА рдбреЗрдЯрд╛ рдЗрдирдкреБрдЯ рдореЛрдб", ["рдореИрдиреБрдЕрд▓", "рд╕рд┐рдореБрд▓реЗрдЯ"], horizontal=True)
    if mode == "рдореИрдиреБрдЕрд▓":
        vwc = st.slider("рдорд┐рдЯреНрдЯреА рдХреА рдирдореА (VWC)", 0.0, 0.6, 0.16, 0.01)
    else:
        seed = st.number_input("рд╕рд┐рдореБрд▓реЗрд╢рди рд╕реАрдб", value=42, step=1)
        np.random.seed(seed)
        vwc = float(np.clip(np.random.normal(0.16, 0.03), 0, 0.6))
        st.metric("рд╕рд┐рдореБрд▓реЗрдЯреЗрдб рдирдореА", f"{vwc:.2f}")

area_m2 = area_to_sq_m(area_value, area_unit)
low, high = SOIL_TARGET_RANGE[soil_type]

# Advisory
liters, deficit_mm, etc_mm = irrigation_need_liters(soil_type, stage, vwc, low, area_m2, tmin, tmax)

col1, col2, col3 = st.columns(3)
with col1:
    st.subheader("рд╕реНрдерд┐рддрд┐")
    if vwc < low:
        st.success("ЁЯМ▒ рдЕрднреА рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВ (рдирдореА рдХрдо рд╣реИ)")
    elif vwc > high:
        st.info("тЬЕ рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ")
    else:
        st.warning("тЪая╕П рдирд┐рдЧрд░рд╛рдиреА рд░рдЦреЗрдВ (рдирдореА рд╕рд╣реА рд╣реИ)")

with col2:
    st.subheader("рдЕрдиреБрдорд╛рдирд┐рдд рдкрд╛рдиреА рдХреА рдЬрд░реВрд░рдд")
    st.metric("рдЖрдЬ рдХрд╛ рдкрд╛рдиреА (рд▓реАрдЯрд░)", f"{liters:,.0f} L")
    st.caption(f"рдШрд╛рдЯрд╛: {deficit_mm:.1f} mm ┬╖ ETc: {etc_mm:.1f} mm")

with col3:
    st.subheader("рдЦреЗрдд рд╡рд┐рд╡рд░рдг")
    st.metric("рдХреНрд╖реЗрддреНрд░рдлрд▓", f"{area_m2:,.0f} m┬▓")
    st.metric("рд▓рдХреНрд╖рд┐рдд рдирдореА рд╕реАрдорд╛", f"{low:.2f} тАУ {high:.2f}")

st.divider()

## ----------------------------
# 7 рджрд┐рди рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдпреЛрдЬрдирд╛
# ----------------------------
st.subheader("ЁЯУЕ 7 рджрд┐рди рдХреА рд╕рд┐рдВрдЪрд╛рдИ рдпреЛрдЬрдирд╛")

dates = [datetime.today() + timedelta(days=i) for i in range(7)]
plan_data = []

for d in dates:
    # рд╣рд░ рджрд┐рди рдХрд╛ рдореМрд╕рдо рдереЛрдбрд╝рд╛ рдмрджрд▓рддрд╛ рд╣реБрдЖ рд╕рд┐рдореБрд▓реЗрдЯ рдХрд░реЗрдВ
    tmin_d = tmin + np.random.uniform(-1, 1)
    tmax_d = tmax + np.random.uniform(-1, 1)
    eto_d = simple_eto_mm_per_day(tmin_d, tmax_d)
    kc = KC_STAGE[stage]
    etc_mm_d = kc * eto_d
    liters_d = etc_mm_d * area_m2
    plan_data.append({"рддрд╛рд░реАрдЦ": d.strftime("%d-%m-%Y"), "рдЕрдиреБрдорд╛рдирд┐рдд ETc (mm)": round(etc_mm_d, 2), "рдкрд╛рдиреА рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ (рд▓реАрдЯрд░)": round(liters_d, 2)})

df_plan = pd.DataFrame(plan_data)

st.dataframe(df_plan, use_container_width=True)

# рдбрд╛рдЙрдирд▓реЛрдб рдмрдЯрди
csv = df_plan.to_csv(index=False).encode('utf-8')
st.download_button(label="тмЗя╕П рдпреЛрдЬрдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (CSV)", data=csv, file_name="sichai_yajana.csv", mime="text/csv")



